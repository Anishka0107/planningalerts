#application
  - if @application.location
    - link_to @application.map_url do
      #map_div(style="width:350px;height:200px")
    #pano(style="width:350px;height:200px")
  
  %h3.address= @application.address
  %p.description= @application.description
  %p.council-reference Council reference: #{@application.council_reference}
  %p.dates
    = scraped_and_received_text(@application)
  - if @application.on_notice_to
    %p.on_notice
      = on_notice_text(@application)
  %ul
    %li
      = link_to "More information", @application.info_url
      about this application
    %li
      = link_to "Support or object", @application.comment_url
      to this application
  %p (Source: #{@application.authority.full_name})
  %p= addthis_bookmark_button

- unless @nearby_applications.empty?
  #nearby-applications
    %h3 Selection of other recent or nearby applications
    %dl
      = render :partial => "application", :collection => @nearby_applications
    = link_to("more applications nearby&hellip;", applications_url(:address => @application.address))

- if @application.location
  :javascript
    var map;
    var myPano;
    var panoClient;
    var pointToLookAt;
    $(document).ready(function(){
      map = new mxn.Mapstraction("map_div","google");
      point = new mxn.LatLonPoint(#{@application.lat},#{@application.lng});
      map.setCenterAndZoom(point,16);
      map.dragging(false);
      marker = new mxn.Marker(point)
      marker.setLabel("#{escape_javascript(@application.address)}");
      map.addMarker(marker);

      panoClient = new GStreetviewClient(); 
      myPano = new GStreetviewPanorama(document.getElementById("pano"));
      pointToLookAt = new GLatLng(#{@application.lat},#{@application.lng});
      panoClient.getNearestPanorama(pointToLookAt, showPanoData);
    })
    
    function showPanoData(panoData) {
      if (panoData.code != 200) {
        return;
      }
      var angle = computeAngle(pointToLookAt, panoData.location.latlng);
      myPano.setLocationAndPOV(panoData.location.latlng, {yaw: angle});
    }
    
    function computeAngle(endLatLng, startLatLng) {
      var DEGREE_PER_RADIAN = 57.2957795;
      var RADIAN_PER_DEGREE = 0.017453;
    
      var dlat = endLatLng.lat() - startLatLng.lat();
      var dlng = endLatLng.lng() - startLatLng.lng();
      // We multiply dlng with cos(endLat), since the two points are very closeby,
      // so we assume their cos values are approximately equal.
      var yaw = Math.atan2(dlng * Math.cos(endLatLng.lat() * RADIAN_PER_DEGREE), dlat)
            * DEGREE_PER_RADIAN;
      return wrapAngle(yaw);
    }
    
    function wrapAngle(angle) {
      if (angle >= 360) {
        angle -= 360;
      } else if (angle < 0) {
        angle += 360;
      }
      return angle;
    }
