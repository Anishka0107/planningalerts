- content_for :page_title, page_title(@application)
- content_for :meta_description, "Planning application: #{@application.description} Address: #{@application.address}"
- content_for :map, true
#application
  - if @application.location
    = link_to @application.map_url do
      #map_div(style="width:350px;height:200px")
    #pano(style="width:350px;height:200px")
  
  %h3.address= @application.address
  %p.description= @application.description
  %p.council-reference Council reference: #{@application.council_reference}
  %p.dates
    = scraped_and_received_text(@application)
  - if @application.on_notice_to
    %p.on_notice
      = on_notice_text(@application)
  %ul
    %li
      = link_to "More information", @application.info_url
      about this application
    - unless @application.authority.contactable?
      %li
        = link_to "Support or object", @application.comment_url
        to this application
  %p (Source: #{@application.authority.full_name})
  %p= addthis_bookmark_button.html_safe

  %ul#subscribe
    %li
      = link_to new_alert_path(:address => @application.address) do
        = image_tag "email.png", :size => "28x28"
        Email me whenever there are new applications near here
      (No more than once per day)
    %li
      = link_to applications_path(:format => 'rss', :address => @application.address, :radius => 2000) do
        = image_tag "rss.png", :size => "28x28"
        Subscribe to an RSS feed for all applications near here

  - if @application.authority.contactable?
    - unless @application.comments.confirmed.empty?
      %h4 Comments
    %ol
      - @application.comments.confirmed.each do |comment|
        %li{:id => "comment#{comment.id}"}
          = render :partial => 'comments/comment', :locals => {:comment => comment}
          = link_to "Report comment", new_comment_report_path(comment)
    %h4 Add your own comment
    %p
      All the information you provide in your comment below will be sent to
      <strong>#{@application.authority.full_name}</strong> and will influence whether the application
      is approved or not. The text of your comment and your name will be public.
    %p
      = semantic_form_for [@application, @comment] do |f|
        = f.inputs do
          = f.input :text, :label => 'Comment'
          = f.input :name, :label => 'Name'
          = f.input :email, :label => 'Email', :hint => "We never display your email address"
        %p
          Please note:
          %ul
            %li Be polite, concise and to the point.
            %li
              By law some states require additional information from you when
              commenting on applications. Weâ€™ll have information on this soon.
              Please ensure you do the right thing. 
        = f.buttons

%h4 Tweets mentioning this planning application
#boastful

- unless @application.find_all_nearest_or_recent.empty?
  #nearby-applications
    %h4 Selection of other recent or nearby applications
    %dl
      = render :partial => "applications/application", :collection => @application.find_all_nearest_or_recent[0...5]
    = link_to("more applications nearby&hellip;".html_safe, nearby_application_url(@application))

- if @application.location
  :javascript
    $(document).ready(function() {
      // Strip any parameters off the end of the url
      $('#boastful').boastful({limit: '14', location: location.href.split('?')[0]});
    });

    $(document).ready(function(){
      var map = new mxn.Mapstraction("map_div","google");
      point = new mxn.LatLonPoint(#{@application.lat},#{@application.lng});
      map.setCenterAndZoom(point,16);
      map.dragging(false);
      marker = new mxn.Marker(point)
      marker.setLabel("#{escape_javascript(@application.address)}");
      map.addMarker(marker);

      // Can't yet figure out how to make the POV point at the marker
      var pointToLookAt = new google.maps.LatLng(#{@application.lat},#{@application.lng});
      var myPano = new  google.maps.StreetViewPanorama(document.getElementById("pano"),
        {position: pointToLookAt, navigationControl: false, addressControl: false, zoom: 0});
      google.maps.event.addListener(myPano, 'position_changed', function() {
        // Orient the camera to face the position we're interested in
        var angle = computeAngle(pointToLookAt, myPano.getPosition());
        myPano.setPov({heading:angle, pitch:0, zoom:1}); 
      }); 
      var panoMarker = new google.maps.Marker({position: pointToLookAt, title: "#{escape_javascript(@application.address)}"}); 
      panoMarker.setMap(myPano); 
      
    })

    function computeAngle(endLatLng, startLatLng) {
      var DEGREE_PER_RADIAN = 57.2957795;
      var RADIAN_PER_DEGREE = 0.017453;

      var dlat = endLatLng.lat() - startLatLng.lat();
      var dlng = endLatLng.lng() - startLatLng.lng();
      // We multiply dlng with cos(endLat), since the two points are very closeby,
      // so we assume their cos values are approximately equal.
      var yaw = Math.atan2(dlng * Math.cos(endLatLng.lat() * RADIAN_PER_DEGREE), dlat)
        * DEGREE_PER_RADIAN;
      return wrapAngle(yaw);
    }

    function wrapAngle(angle) {
      if (angle >= 360) {
        angle -= 360;
      } else if (angle < 0) {
        angle += 360;
      }
      return angle;
    }
    
= javascript_include_tag "/javascripts/jquery.boastful.js"

