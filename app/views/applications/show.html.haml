- content_for :page_title, page_title(@application)
- content_for :meta_description, "Planning application: #{@application.description} Address: #{@application.address}"
- content_for :map, true
#application
  - if @application.location
    = link_to @application.map_url do
      #map_div(style="width:350px;height:200px")
        %noscript Please enable Javascript in your browser settings to view this map.
    #pano(style="width:350px;height:200px")
      %noscript Please enable Javascript in your browser settings to view this StreetView image.
  
  %h3.address= @application.address
  %p.description= @application.description
  %p.dates
    = scraped_and_received_text(@application)
  %p.more
    = link_to "Read more information", @application.info_url
    about this application
  %p.source (Source: #{@application.authority.full_name}, reference #{@application.council_reference})
  %p= addthis_bookmark_button.html_safe
  - if @application.no_alerted
    %p.no_alerted
      - if @application.no_alerted == 1
        1 person was
      - else
        #{@application.no_alerted} people were
      notified of this application via
      = link_to "email alerts", new_alert_path
  %ul#subscribe
    - unless @application.find_all_nearest_or_recent.empty?
      %li#nearby-applications
        - if @application.find_all_nearest_or_recent.count == 1
          There is
          = link_to "1 other nearby and recent application", nearby_application_url(@application)
        - else
          There are
          = link_to "#{@application.find_all_nearest_or_recent.count} other nearby and recent applications", nearby_application_url(@application)
    %li
      = link_to new_alert_path(:address => @application.address) do
        = image_tag "email.png", :size => "28x28"
        Email me when there are new applications nearby
    %li
      = link_to applications_path(:format => 'rss', :address => @application.address, :radius => 2000) do
        = image_tag "rss.png", :size => "28x28"
        Subscribe to an RSS feed for applications nearby

  - if @application.authority.contactable?
    - unless @application.comments.visible.empty?
      %h4 Comments
    %ol#comments
      - @application.comments.visible.each do |comment|
        %li{:id => "comment#{comment.id}"}
          = render :partial => 'comments/comment', :locals => {:comment => comment}
  %h4 Add your own comment
  - if @application.authority.contactable?  
    - if @application.on_notice_to
      %p= on_notice_text(@application)
    %p
      All the information you provide in your comment below will be sent to
      <strong>#{@application.authority.full_name}</strong> and will influence whether the application
      is approved or not. The text of your comment and your name will be public.
    %p
      If you have made a donation to a Councillor and/or gift to a Councillor or Council employee you may
      #{link_to("need to disclose this", faq_path(:anchor => "disclosure", :comment => true))}.
    = semantic_form_for [@application, @comment] do |f|
      = f.inputs do
        = f.input :text, :label => 'Comment',
          :hint => "Explain why you think this application should be approved or not. Please be polite, concise and to the point."
        = f.input :name, :label => 'Name', :hint => "Please use your real full name if possible."
        = f.input :email, :label => 'Email', :hint => "We never display your email address"
        %li#comment_address_input.string.required
          = f.label 'address', :required => true
          = f.text_field 'address'
          %p.inline-hints
            e.g. 1 Sowerby St, Goulburn (we never display this).
            = link_to("Why do you need my address?", faq_path(:anchor => "address", :comment => true))
          %div#faq_commenting_address.inline-hints.hidden
            = render :partial => 'static/faq_commenting_address'
      = f.actions
  - else
    %p
      = link_to "How to comment", @application.comment_url
      on this application (from #{@application.authority.full_name}).
      - if @application.on_notice_to
        = on_notice_text(@application)

- if @application.location
  :javascript
    $(document).ready(function(){
      var map = new mxn.Mapstraction("map_div","google");
      point = new mxn.LatLonPoint(#{@application.lat},#{@application.lng});
      map.setCenterAndZoom(point,16);
      map.dragging(false);
      marker = new mxn.Marker(point)
      marker.setLabel("#{escape_javascript(@application.address)}");
      map.addMarker(marker);

      // Can't yet figure out how to make the POV point at the marker
      var pointToLookAt = new google.maps.LatLng(#{@application.lat},#{@application.lng});
      var myPano = new  google.maps.StreetViewPanorama(document.getElementById("pano"),
        {position: pointToLookAt, navigationControl: false, addressControl: false, zoom: 0});
      google.maps.event.addListener(myPano, 'position_changed', function() {
        // Orient the camera to face the position we're interested in
        var angle = computeAngle(pointToLookAt, myPano.getPosition());
        myPano.setPov({heading:angle, pitch:0, zoom:1}); 
      }); 
      var panoMarker = new google.maps.Marker({position: pointToLookAt, title: "#{escape_javascript(@application.address)}"}); 
      panoMarker.setMap(myPano); 
      
    })

    function computeAngle(endLatLng, startLatLng) {
      var DEGREE_PER_RADIAN = 57.2957795;
      var RADIAN_PER_DEGREE = 0.017453;

      var dlat = endLatLng.lat() - startLatLng.lat();
      var dlng = endLatLng.lng() - startLatLng.lng();
      // We multiply dlng with cos(endLat), since the two points are very closeby,
      // so we assume their cos values are approximately equal.
      var yaw = Math.atan2(dlng * Math.cos(endLatLng.lat() * RADIAN_PER_DEGREE), dlat)
        * DEGREE_PER_RADIAN;
      return wrapAngle(yaw);
    }

    function wrapAngle(angle) {
      if (angle >= 360) {
        angle -= 360;
      } else if (angle < 0) {
        angle += 360;
      }
      return angle;
    }
    
= javascript_include_tag "/javascripts/applications.js"

